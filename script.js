// üöÄ PRODUCTION MODE - ALL CONSOLE LOGS DISABLED
const IS_PRODUCTION = true;

// Completely disable all console logs in production
if (IS_PRODUCTION) {
    console.log = function() {};
    console.debug = function() {};
    console.info = function() {};
    console.warn = function() {};
    // Only errors will show
}

const translations = {
  en: {
    welcome: "Welcome, User",
    title1: "AI PROBLEM SOLVE",
    title2: "MUHAMMAD HARIS",
    welcomeTitle: "AI PROBLEM SOLVE",
    welcomeMessage:
      "How can I help you today? I can assist with problem solving, image processing, and much more!",
    newChat: "New Chat",
    clearHistory: "Clear History",
    settings: "Settings",
    darkMode: "Dark Mode",
    language: "Language:",
    aiOn: "AI: ON",
    textColor: "Text Color",
    placeholder: "Type your message here...",
    settingsTitle: "Settings",
    appearance: "Appearance",
    history: "History",
    textColorLabel: "Text Color",
    chatHistory: "Chat History",
    clearAllHistory: "Clear All History",
    cancel: "Cancel",
    save: "Save",
    typing: "AI is typing",
    you: "You",
    aiAssistant: "AI Assistant",
    confirmClear: "Are you sure you want to clear all chat history?",
    noMessages: "No messages yet. Start a conversation!",
    aiResponses: {
      hello: "Hello! How can I assist you with problem solving today?",
      help: "I'm here to help! I can assist with various problems including:\n‚Ä¢ Technical issues\n‚Ä¢ Math problems\n‚Ä¢ Programming questions\n‚Ä¢ Image processing\n‚Ä¢ General problem solving\n\nWhat specific issue can I help you with?",
      thanks: "You're welcome! Is there anything else I can help you with?",
      image:
        "I see you've shared an image. While I can't directly process images in this demo, I can help you with:\n‚Ä¢ Image format questions\n‚Ä¢ Image processing concepts\n‚Ä¢ Troubleshooting image issues\n‚Ä¢ Best practices for image optimization\n\nHow can I assist you with images?",
      problem:
        "I'd be happy to help you solve that problem! Could you provide more details about the specific issue you're facing? The more information you give me, the better I can assist you.",
      default: [
        "That's an interesting question! Let me help you with that.",
        "I understand your concern. Here's what I can suggest:",
        "Based on your query, I recommend the following approach:",
        "I can help you solve that problem. Here's my analysis:",
        "That's a common issue many users face. Here's the solution:",
        "I've analyzed your problem and here's my recommendation:",
      ],
    },
  },
  es: {
    welcome: "Bienvenido, Usuario",
    title1: "SOLUCI√ìN DE PROBLEMAS IA",
    title2: "MUHAMMAD HARIS",
    welcomeTitle: "SOLUCI√ìN DE PROBLEMAS IA",
    welcomeMessage:
      "¬øC√≥mo puedo ayudarte hoy? ¬°Puedo ayudar con la resoluci√≥n de problemas, procesamiento de im√°genes y mucho m√°s!",
    newChat: "Nuevo Chat",
    clearHistory: "Borrar Historial",
    settings: "Configuraci√≥n",
    darkMode: "Modo Oscuro",
    language: "Idioma:",
    aiOn: "IA: ACTIVADA",
    textColor: "Color de Texto",
    placeholder: "Escribe tu mensaje aqu√≠...",
    settingsTitle: "Configuraci√≥n",
    appearance: "Apariencia",
    history: "Historial",
    textColorLabel: "Color de Texto",
    chatHistory: "Historial de Chat",
    clearAllHistory: "Borrar Todo el Historial",
    cancel: "Cancelar",
    save: "Guardar",
    typing: "La IA est√° escribiendo",
    you: "T√∫",
    aiAssistant: "Asistente IA",
    confirmClear:
      "¬øEst√°s seguro de que quieres borrar todo el historial de chat?",
    noMessages: "A√∫n no hay mensajes. ¬°Inicia una conversaci√≥n!",
    aiResponses: {
      hello: "¬°Hola! ¬øC√≥mo puedo ayudarte con la resoluci√≥n de problemas hoy?",
      help: "¬°Estoy aqu√≠ para ayudar! Puedo ayudar con varios problemas incluyendo:\n‚Ä¢ Problemas t√©cnicos\n‚Ä¢ Problemas matem√°ticos\n‚Ä¢ Preguntas de programaci√≥n\n‚Ä¢ Procesamiento de im√°genes\n‚Ä¢ Resoluci√≥n general de problemas\n\n¬øCon qu√© problema espec√≠fico puedo ayudarte?",
      thanks: "¬°De nada! ¬øHay algo m√°s en lo que pueda ayudarte?",
      image:
        "Veo que has compartido una imagen. Aunque no puedo procesar im√°genes directamente en esta demo, puedo ayudarte con:\n‚Ä¢ Preguntas sobre formatos de imagen\n‚Ä¢ Conceptos de procesamiento de im√°genes\n‚Ä¢ Soluci√≥n de problemas con im√°genes\n‚Ä¢ Mejores pr√°cticas para optimizaci√≥n de im√°genes\n\n¬øC√≥mo puedo ayudarte con las im√°genes?",
      problem:
        "¬°Me encantar√≠a ayudarte a resolver ese problema! ¬øPodr√≠as proporcionar m√°s detalles sobre el problema espec√≠fico que est√°s enfrentando? Cuanta m√°s informaci√≥n me des, mejor podr√© ayudarte.",
      default: [
        "¬°Esa es una pregunta interesante! D√©jame ayudarte con eso.",
        "Entiendo tu preocupaci√≥n. Esto es lo que puedo sugerir:",
        "Bas√°ndome en tu consulta, recomiendo el siguiente enfoque:",
        "Puedo ayudarte a resolver ese problema. Aqu√≠ est√° mi an√°lisis:",
        "Ese es un problema com√∫n que muchos usuarios enfrentan. Aqu√≠ est√° la soluci√≥n:",
        "He analizado tu problema y aqu√≠ est√° mi recomendaci√≥n:",
      ],
    },
  },
  fr: {
    welcome: "Bienvenue, Utilisateur",
    title1: "R√âSOLUTION DE PROBL√àMES IA",
    title2: "MUHAMMAD HARIS",
    welcomeTitle: "R√âSOLUTION DE PROBL√àMES IA",
    welcomeMessage:
      "Comment puis-je vous aider aujourd'hui ? Je peux vous aider avec la r√©solution de probl√®mes, le traitement d'images et bien plus encore !",
    newChat: "Nouvelle Conversation",
    clearHistory: "Effacer l'Historique",
    settings: "Param√®tres",
    darkMode: "Mode Sombre",
    language: "Langue:",
    aiOn: "IA: ACTIV√âE",
    textColor: "Couleur du Texte",
    placeholder: "Tapez votre message ici...",
    settingsTitle: "Param√®tres",
    appearance: "Apparence",
    history: "Historique",
    textColorLabel: "Couleur du Texte",
    chatHistory: "Historique de Conversation",
    clearAllHistory: "Effacer Tout l'Historique",
    cancel: "Annuler",
    save: "Enregistrer",
    typing: "L'IA est en train d'√©crire",
    you: "Vous",
    aiAssistant: "Assistant IA",
    confirmClear:
      "√ätes-vous s√ªr de vouloir effacer tout l'historique des conversations ?",
    noMessages: "Aucun message pour le moment. Commencez une conversation !",
    aiResponses: {
      hello:
        "Bonjour ! Comment puis-je vous aider avec la r√©solution de probl√®mes aujourd'hui ?",
      help: "Je suis l√† pour aider ! Je peux assister avec divers probl√®mes incluant :\n‚Ä¢ Probl√®mes techniques\n‚Ä¢ Probl√®mes math√©matiques\n‚Ä¢ Questions de programmation\n‚Ä¢ Traitement d'images\n‚Ä¢ R√©solution g√©n√©rale de probl√®mes\n\nAvec quel probl√®me sp√©cifique puis-je vous aider ?",
      thanks:
        "Je vous en prie ! Y a-t-il autre chose avec laquelle je peux vous aider ?",
      image:
        "Je vois que vous avez partag√© une image. Bien que je ne puisse pas traiter directement les images dans cette d√©mo, je peux vous aider avec :\n‚Ä¢ Questions sur les formats d'image\n‚Ä¢ Concepts de traitement d'image\n‚Ä¢ D√©pannage des probl√®mes d'image\n‚Ä¢ Meilleures pratiques pour l'optimisation d'image\n\nComment puis-je vous aider avec les images ?",
      problem:
        "Je serais ravi de vous aider √† r√©soudre ce probl√®me ! Pourriez-vous fournir plus de d√©tails sur le probl√®me sp√©cifique que vous rencontrez ? Plus vous me donnez d'informations, mieux je peux vous aider.",
      default: [
        "C'est une question int√©ressante ! Laissez-moi vous aider avec cela.",
        "Je comprends votre pr√©occupation. Voici ce que je peux sugg√©rer :",
        "Sur la base de votre requ√™te, je recommande l'approche suivante :",
        "Je peux vous aider √† r√©soudre ce probl√®me. Voici mon analyse :",
        "C'est un probl√®me courant que de nombreux utilisateurs rencontrent. Voici la solution :",
        "J'ai analys√© votre probl√®me et voici ma recommandation :",
      ],
    },
  },
  de: {
    welcome: "Willkommen, Benutzer",
    title1: "KI PROBLEML√ñSUNG",
    title2: "MUHAMMAD HARIS",
    welcomeTitle: "KI PROBLEML√ñSUNG",
    welcomeMessage:
      "Wie kann ich Ihnen heute helfen? Ich kann bei Probleml√∂sungen, Bildverarbeitung und vielem mehr unterst√ºtzen!",
    newChat: "Neuer Chat",
    clearHistory: "Verlauf L√∂schen",
    settings: "Einstellungen",
    darkMode: "Dunkler Modus",
    language: "Sprache:",
    aiOn: "KI: EIN",
    textColor: "Textfarbe",
    placeholder: "Schreiben Sie Ihre Nachricht hier...",
    settingsTitle: "Einstellungen",
    appearance: "Erscheinungsbild",
    history: "Verlauf",
    textColorLabel: "Textfarbe",
    chatHistory: "Chat-Verlauf",
    clearAllHistory: "Gesamten Verlauf L√∂schen",
    cancel: "Abbrechen",
    save: "Speichern",
    typing: "KI schreibt",
    you: "Sie",
    aiAssistant: "KI-Assistent",
    confirmClear:
      "Sind Sie sicher, dass Sie den gesamten Chat-Verlauf l√∂schen m√∂chten?",
    noMessages: "Noch keine Nachrichten. Starten Sie eine Konversation!",
    aiResponses: {
      hello: "Hallo! Wie kann ich Ihnen heute bei der Probleml√∂sung helfen?",
      help: "Ich bin hier, um zu helfen! Ich kann bei verschiedenen Problemen unterst√ºtzen, einschlie√ülich:\n‚Ä¢ Technische Probleme\n‚Ä¢ Mathematische Probleme\n‚Ä¢ Programmierfragen\n‚Ä¢ Bildverarbeitung\n‚Ä¢ Allgemeine Probleml√∂sung\n\nMit welchem spezifischen Problem kann ich Ihnen helfen?",
      thanks: "Gern geschehen! Kann ich Ihnen sonst noch behilflich sein?",
      image:
        "Ich sehe, Sie haben ein Bild geteilt. W√§hrend ich in dieser Demo keine Bilder direkt verarbeiten kann, kann ich Ihnen helfen mit:\n‚Ä¢ Fragen zu Bildformaten\n‚Ä¢ Konzepten der Bildverarbeitung\n‚Ä¢ Fehlerbehebung bei Bildproblemen\n‚Ä¢ Best Practices zur Bildoptimierung\n\nWie kann ich Ihnen mit Bildern helfen?",
      problem:
        "Ich helfe Ihnen gerne bei der L√∂sung dieses Problems! K√∂nnten Sie mehr Details zu dem spezifischen Problem mitteilen, mit dem Sie konfrontiert sind? Je mehr Informationen Sie mir geben, desto besser kann ich Ihnen helfen.",
      default: [
        "Das ist eine interessante Frage! Lassen Sie mich Ihnen dabei helfen.",
        "Ich verstehe Ihr Anliegen. Hier ist, was ich vorschlagen kann:",
        "Basierend auf Ihrer Anfrage empfehle ich folgenden Ansatz:",
        "Ich kann Ihnen helfen, dieses Problem zu l√∂sen. Hier ist meine Analyse:",
        "Das ist ein h√§ufiges Problem, mit dem viele Benutzer konfrontiert sind. Hier ist die L√∂sung:",
        "Ich habe Ihr Problem analysiert und hier ist meine Empfehlung:",
      ],
    },
  },

  zh: {
    welcome: "Ê¨¢ËøéÔºåÁî®Êà∑",
    title1: "AI ÈóÆÈ¢òËß£ÂÜ≥",
    title2: "MUHAMMAD HARIS",
    welcomeTitle: "AI ÈóÆÈ¢òËß£ÂÜ≥",
    welcomeMessage: "‰ªäÂ§©ÊàëËÉΩ‰∏∫ÊÇ®ÂÅö‰ªÄ‰πàÔºüÊàëÂèØ‰ª•ÂçèÂä©Ëß£ÂÜ≥ÈóÆÈ¢ò„ÄÅÂõæÂÉèÂ§ÑÁêÜÁ≠âÁ≠âÔºÅ",
    newChat: "Êñ∞ËÅäÂ§©",
    clearHistory: "Ê∏ÖÈô§ÂéÜÂè≤",
    settings: "ËÆæÁΩÆ",
    darkMode: "Ê∑±Ëâ≤Ê®°Âºè",
    language: "ËØ≠Ë®Ä:",
    aiOn: "AI: ÂºÄÂêØ",
    textColor: "ÊñáÊú¨È¢úËâ≤",
    placeholder: "Âú®Ê≠§ËæìÂÖ•ÊÇ®ÁöÑÊ∂àÊÅØ...",
    settingsTitle: "ËÆæÁΩÆ",
    appearance: "Â§ñËßÇ",
    history: "ÂéÜÂè≤ËÆ∞ÂΩï",
    textColorLabel: "ÊñáÊú¨È¢úËâ≤",
    chatHistory: "ËÅäÂ§©ÂéÜÂè≤",
    clearAllHistory: "Ê∏ÖÈô§ÊâÄÊúâÂéÜÂè≤",
    cancel: "ÂèñÊ∂à",
    save: "‰øùÂ≠ò",
    typing: "AIÊ≠£Âú®ËæìÂÖ•",
    you: "ÊÇ®",
    aiAssistant: "AIÂä©Êâã",
    confirmClear: "ÊÇ®Á°ÆÂÆöË¶ÅÊ∏ÖÈô§ÊâÄÊúâËÅäÂ§©ÂéÜÂè≤ÂêóÔºü",
    noMessages: "ËøòÊ≤°ÊúâÊ∂àÊÅØ„ÄÇÂºÄÂßãÂØπËØùÂêßÔºÅ",
    aiResponses: {
      hello: "ÊÇ®Â•ΩÔºÅ‰ªäÂ§©ÊàëËÉΩÂ¶Ç‰ΩïÂçèÂä©ÊÇ®Ëß£ÂÜ≥ÈóÆÈ¢òÔºü",
      help: "ÊàëÂú®ËøôÈáå‰∏∫ÊÇ®Êèê‰æõÂ∏ÆÂä©ÔºÅÊàëÂèØ‰ª•ÂçèÂä©Ëß£ÂÜ≥ÂêÑÁßçÈóÆÈ¢òÔºåÂåÖÊã¨Ôºö\n‚Ä¢ ÊäÄÊúØÈóÆÈ¢ò\n‚Ä¢ Êï∞Â≠¶ÈóÆÈ¢ò\n‚Ä¢ ÁºñÁ®ãÈóÆÈ¢ò\n‚Ä¢ ÂõæÂÉèÂ§ÑÁêÜ\n‚Ä¢ ‰∏ÄËà¨ÈóÆÈ¢òËß£ÂÜ≥\n\nÊÇ®ÈúÄË¶ÅÊàëÂ∏ÆÂä©Ëß£ÂÜ≥‰ªÄ‰πàÂÖ∑‰ΩìÈóÆÈ¢òÔºü",
      thanks: "‰∏çÂÆ¢Ê∞îÔºÅËøòÊúâ‰ªÄ‰πàÊàëÂèØ‰ª•Â∏ÆÂä©ÊÇ®ÁöÑÂêóÔºü",
      image:
        "ÊàëÁúãÂà∞ÊÇ®ÂàÜ‰∫´‰∫Ü‰∏ÄÂº†ÂõæÁâá„ÄÇËôΩÁÑ∂Âú®Ëøô‰∏™ÊºîÁ§∫‰∏≠ÊàëÊó†Ê≥ïÁõ¥Êé•Â§ÑÁêÜÂõæÂÉèÔºå‰ΩÜÊàëÂèØ‰ª•Â∏ÆÂä©ÊÇ®Ôºö\n‚Ä¢ ÂõæÂÉèÊ†ºÂºèÈóÆÈ¢ò\n‚Ä¢ ÂõæÂÉèÂ§ÑÁêÜÊ¶ÇÂøµ\n‚Ä¢ ÂõæÂÉèÈóÆÈ¢òÊïÖÈöúÊéíÈô§\n‚Ä¢ ÂõæÂÉè‰ºòÂåñÊúÄ‰Ω≥ÂÆûË∑µ\n\nÊàëÂ¶Ç‰ΩïÂ∏ÆÂä©ÊÇ®Â§ÑÁêÜÂõæÂÉèÔºü",
      problem:
        "ÊàëÂæà‰πêÊÑèÂ∏ÆÂä©ÊÇ®Ëß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢òÔºÅÊÇ®ËÉΩÊèê‰æõÊõ¥Â§öÂÖ≥‰∫éÊÇ®Èù¢‰∏¥ÁöÑÂÖ∑‰ΩìÈóÆÈ¢òÁöÑËØ¶ÁªÜ‰ø°ÊÅØÂêóÔºüÊÇ®ÁªôÊàëÁöÑ‰ø°ÊÅØË∂äÂ§öÔºåÊàëÂ∞±Ë∂äËÉΩÂ∏ÆÂä©ÊÇ®„ÄÇ",
      default: [
        "ËøôÊòØ‰∏Ä‰∏™ÊúâË∂£ÁöÑÈóÆÈ¢òÔºÅËÆ©ÊàëÊù•Â∏ÆÂä©ÊÇ®Ëß£ÂÜ≥„ÄÇ",
        "ÊàëÁêÜËß£ÊÇ®ÁöÑÊãÖÂøß„ÄÇ‰ª•‰∏ãÊòØÊàëÁöÑÂª∫ËÆÆÔºö",
        "Ê†πÊçÆÊÇ®ÁöÑÊü•ËØ¢ÔºåÊàëÊé®Ëçê‰ª•‰∏ãÊñπÊ≥ïÔºö",
        "ÊàëÂèØ‰ª•Â∏ÆÂä©ÊÇ®Ëß£ÂÜ≥Ëøô‰∏™ÈóÆÈ¢ò„ÄÇ‰ª•‰∏ãÊòØÊàëÁöÑÂàÜÊûêÔºö",
        "ËøôÊòØËÆ∏Â§öÁî®Êà∑Èù¢‰∏¥ÁöÑÂ∏∏ËßÅÈóÆÈ¢ò„ÄÇ‰ª•‰∏ãÊòØËß£ÂÜ≥ÊñπÊ°àÔºö",
        "ÊàëÂ∑≤ÁªèÂàÜÊûê‰∫ÜÊÇ®ÁöÑÈóÆÈ¢òÔºå‰ª•‰∏ãÊòØÊàëÁöÑÂª∫ËÆÆÔºö",
      ],
    },
  },
  ja: {
    welcome: "„Çà„ÅÜ„Åì„Åù„ÄÅ„É¶„Éº„Ç∂„Éº",
    title1: "AI ÂïèÈ°åËß£Ê±∫",
    title2: "MUHAMMAD HARIS",
    welcomeTitle: "AI ÂïèÈ°åËß£Ê±∫",
    welcomeMessage:
      "‰ªäÊó•„ÅØ„Å©„ÅÆ„Çà„ÅÜ„Å´„ÅäÊâã‰ºù„ÅÑ„Åß„Åç„Åæ„Åô„ÅãÔºüÂïèÈ°åËß£Ê±∫„ÄÅÁîªÂÉèÂá¶ÁêÜ„Å™„Å©„ÄÅ„Åï„Åæ„Åñ„Åæ„Å™„Çµ„Éù„Éº„Éà„ÅåÂèØËÉΩ„Åß„ÅôÔºÅ",
    newChat: "Êñ∞„Åó„ÅÑ„ÉÅ„É£„ÉÉ„Éà",
    clearHistory: "Â±•Ê≠¥„Çí„ÇØ„É™„Ç¢",
    settings: "Ë®≠ÂÆö",
    darkMode: "„ÉÄ„Éº„ÇØ„É¢„Éº„Éâ",
    language: "Ë®ÄË™û:",
    aiOn: "AI: „Ç™„É≥",
    textColor: "„ÉÜ„Ç≠„Çπ„Éà„ÅÆËâ≤",
    placeholder: "„É°„ÉÉ„Çª„Éº„Ç∏„Çí„Åì„Åì„Å´ÂÖ•Âäõ...",
    settingsTitle: "Ë®≠ÂÆö",
    appearance: "Â§ñË¶≥",
    history: "Â±•Ê≠¥",
    textColorLabel: "„ÉÜ„Ç≠„Çπ„Éà„ÅÆËâ≤",
    chatHistory: "„ÉÅ„É£„ÉÉ„ÉàÂ±•Ê≠¥",
    clearAllHistory: "„Åô„Åπ„Å¶„ÅÆÂ±•Ê≠¥„Çí„ÇØ„É™„Ç¢",
    cancel: "„Ç≠„É£„É≥„Çª„É´",
    save: "‰øùÂ≠ò",
    typing: "AI„ÅåÂÖ•Âäõ‰∏≠",
    you: "„ÅÇ„Å™„Åü",
    aiAssistant: "AI„Ç¢„Ç∑„Çπ„Çø„É≥„Éà",
    confirmClear: "„Åô„Åπ„Å¶„ÅÆ„ÉÅ„É£„ÉÉ„ÉàÂ±•Ê≠¥„Çí„ÇØ„É™„Ç¢„Åó„Å¶„ÇÇ„Çà„Çç„Åó„ÅÑ„Åß„Åô„ÅãÔºü",
    noMessages: "„Åæ„Å†„É°„ÉÉ„Çª„Éº„Ç∏„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ‰ºöË©±„ÇíÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜÔºÅ",
    aiResponses: {
      hello: "„Åì„Çì„Å´„Å°„ÅØÔºÅ‰ªäÊó•„ÅØ„Å©„ÅÆ„Çà„ÅÜ„Å™ÂïèÈ°åËß£Ê±∫„Çí„ÅäÊâã‰ºù„ÅÑ„Åó„Åæ„Åó„Çá„ÅÜ„ÅãÔºü",
      help: "„ÅäÊâã‰ºù„ÅÑ„Åï„Åõ„Å¶„ÅÑ„Åü„Å†„Åç„Åæ„ÅôÔºÅ‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å™„Åï„Åæ„Åñ„Åæ„Å™ÂïèÈ°å„Å´ÂØæÂøú„Åß„Åç„Åæ„ÅôÔºö\n‚Ä¢ ÊäÄË°ìÁöÑ„Å™ÂïèÈ°å\n‚Ä¢ Êï∞Â≠¶„ÅÆÂïèÈ°å\n‚Ä¢ „Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„ÅÆË≥™Âïè\n‚Ä¢ ÁîªÂÉèÂá¶ÁêÜ\n‚Ä¢ ‰∏ÄËà¨ÁöÑ„Å™ÂïèÈ°åËß£Ê±∫\n\nÂÖ∑‰ΩìÁöÑ„Å´„Å©„ÅÆ„Çà„ÅÜ„Å™ÂïèÈ°å„Çí„ÅäÊâã‰ºù„ÅÑ„Åó„Åæ„Åó„Çá„ÅÜ„ÅãÔºü",
      thanks: "„Å©„ÅÜ„ÅÑ„Åü„Åó„Åæ„Åó„Å¶ÔºÅ‰ªñ„Å´‰Ωï„Åã„ÅäÊâã‰ºù„ÅÑ„Åß„Åç„Çã„Åì„Å®„ÅØ„ÅÇ„Çä„Åæ„Åô„ÅãÔºü",
      image:
        "ÁîªÂÉè„ÅåÂÖ±Êúâ„Åï„Çå„Åæ„Åó„Åü„Å≠„ÄÇ„Åì„ÅÆ„Éá„É¢„Åß„ÅØÁõ¥Êé•ÁîªÂÉè„ÇíÂá¶ÁêÜ„Åô„Çã„Åì„Å®„ÅØ„Åß„Åç„Åæ„Åõ„Çì„Åå„ÄÅ‰ª•‰∏ã„ÅÆ„Åì„Å®„Åß„ÅäÊâã‰ºù„ÅÑ„Åß„Åç„Åæ„ÅôÔºö\n‚Ä¢ ÁîªÂÉè„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Å´Èñ¢„Åô„ÇãË≥™Âïè\n‚Ä¢ ÁîªÂÉèÂá¶ÁêÜ„ÅÆÊ¶ÇÂøµ\n‚Ä¢ ÁîªÂÉè„ÅÆÂïèÈ°å„ÅÆ„Éà„É©„Éñ„É´„Ç∑„É•„Éº„ÉÜ„Ç£„É≥„Ç∞\n‚Ä¢ ÁîªÂÉèÊúÄÈÅ©Âåñ„ÅÆ„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ\n\nÁîªÂÉè„Å´Èñ¢„Åó„Å¶„Å©„ÅÆ„Çà„ÅÜ„Å´„ÅäÊâã‰ºù„ÅÑ„Åó„Åæ„Åó„Çá„ÅÜ„ÅãÔºü",
      problem:
        "„Åù„ÅÆÂïèÈ°å„ÅÆËß£Ê±∫„Çí„ÅäÊâã‰ºù„ÅÑ„Åï„Åõ„Å¶„ÅÑ„Åü„Å†„Åç„Åæ„ÅôÔºÅÁõ¥Èù¢„Åó„Å¶„ÅÑ„ÇãÂÖ∑‰ΩìÁöÑ„Å™ÂïèÈ°å„Å´„Å§„ÅÑ„Å¶„ÄÅ„ÇÇ„ÅÜÂ∞ë„ÅóË©≥Á¥∞„ÇíÊïô„Åà„Å¶„ÅÑ„Åü„Å†„Åë„Åæ„Åô„ÅãÔºü„ÅÑ„Åü„Å†„ÅèÊÉÖÂ†±„ÅåÂ§ö„ÅÑ„Åª„Å©„ÄÅ„Çà„ÇäÈÅ©Âàá„Å™„Çµ„Éù„Éº„Éà„Åå„Åß„Åç„Åæ„Åô„ÄÇ",
      default: [
        "„Åù„Çå„ÅØËààÂë≥Ê∑±„ÅÑË≥™Âïè„Åß„ÅôÔºÅ„ÅäÊâã‰ºù„ÅÑ„Åï„Åõ„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
        "„ÅîÊá∏Âøµ„ÇíÁêÜËß£„Åó„Åæ„Åó„Åü„ÄÇ‰ª•‰∏ã„ÅåÁßÅ„ÅÆÊèêÊ°à„Åß„ÅôÔºö",
        "„ÅäÂïè„ÅÑÂêà„Çè„ÅõÂÜÖÂÆπ„Å´Âü∫„Å•„Åç„ÄÅ‰ª•‰∏ã„ÅÆ„Ç¢„Éó„É≠„Éº„ÉÅ„Çí„ÅäÂãß„ÇÅ„Åó„Åæ„ÅôÔºö",
        "„Åù„ÅÆÂïèÈ°å„ÅÆËß£Ê±∫„Çí„ÅäÊâã‰ºù„ÅÑ„Åß„Åç„Åæ„Åô„ÄÇ‰ª•‰∏ã„ÅåÁßÅ„ÅÆÂàÜÊûê„Åß„ÅôÔºö",
        "„Åù„Çå„ÅØÂ§ö„Åè„ÅÆ„É¶„Éº„Ç∂„Éº„ÅåÁõ¥Èù¢„Åô„Çã‰∏ÄËà¨ÁöÑ„Å™ÂïèÈ°å„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅåËß£Ê±∫Á≠ñ„Åß„ÅôÔºö",
        "ÂïèÈ°å„ÇíÂàÜÊûê„Åó„Åæ„Åó„Åü„ÄÇ‰ª•‰∏ã„ÅåÁßÅ„ÅÆÊé®Â•®‰∫ãÈ†Ö„Åß„ÅôÔºö",
      ],
    },
  },
  ar: {
    welcome: "ŸÖÿ±ÿ≠ÿ®Ÿãÿßÿå ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ",
    title1: "ÿ≠ŸÑ ÿßŸÑŸÖÿ¥ŸÉŸÑÿßÿ™ ÿ®ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä",
    title2: "MUHAMMAD HARIS",
    welcomeTitle: "ÿ≠ŸÑ ÿßŸÑŸÖÿ¥ŸÉŸÑÿßÿ™ ÿ®ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä",
    welcomeMessage:
      "ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ÿßŸÑŸäŸàŸÖÿü ŸäŸÖŸÉŸÜŸÜŸä ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ© ŸÅŸä ÿ≠ŸÑ ÿßŸÑŸÖÿ¥ŸÉŸÑÿßÿ™ ŸàŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿµŸàÿ± Ÿàÿ∫Ÿäÿ± ÿ∞ŸÑŸÉ ÿßŸÑŸÉÿ´Ÿäÿ±!",
    newChat: "ŸÖÿ≠ÿßÿØÿ´ÿ© ÿ¨ÿØŸäÿØÿ©",
    clearHistory: "ŸÖÿ≥ÿ≠ ÿßŸÑÿ≥ÿ¨ŸÑ",
    settings: "ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™",
    darkMode: "ÿßŸÑŸàÿ∂ÿπ ÿßŸÑÿØÿßŸÉŸÜ",
    language: "ÿßŸÑŸÑÿ∫ÿ©:",
    aiOn: "ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä: ÿ™ÿ¥ÿ∫ŸäŸÑ",
    textColor: "ŸÑŸàŸÜ ÿßŸÑŸÜÿµ",
    placeholder: "ÿßŸÉÿ™ÿ® ÿ±ÿ≥ÿßŸÑÿ™ŸÉ ŸáŸÜÿß...",
    settingsTitle: "ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™",
    appearance: "ÿßŸÑŸÖÿ∏Ÿáÿ±",
    history: "ÿßŸÑÿ≥ÿ¨ŸÑ",
    textColorLabel: "ŸÑŸàŸÜ ÿßŸÑŸÜÿµ",
    chatHistory: "ÿ≥ÿ¨ŸÑ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©",
    clearAllHistory: "ŸÖÿ≥ÿ≠ ŸÉŸÑ ÿßŸÑÿ≥ÿ¨ŸÑ",
    cancel: "ÿ•ŸÑÿ∫ÿßÿ°",
    save: "ÿ≠ŸÅÿ∏",
    typing: "ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ŸäŸÉÿ™ÿ®",
    you: "ÿ£ŸÜÿ™",
    aiAssistant: "ÿßŸÑŸÖÿ≥ÿßÿπÿØ ÿßŸÑÿ∞ŸÉŸä",
    confirmClear: "ŸáŸÑ ÿ£ŸÜÿ™ ŸÖÿ™ÿ£ŸÉÿØ ÿ£ŸÜŸÉ ÿ™ÿ±ŸäÿØ ŸÖÿ≥ÿ≠ ŸÉŸÑ ÿ≥ÿ¨ŸÑ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©ÿü",
    noMessages: "ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ±ÿ≥ÿßÿ¶ŸÑ ÿ®ÿπÿØ. ÿßÿ®ÿØÿ£ ŸÖÿ≠ÿßÿØÿ´ÿ©!",
    aiResponses: {
      hello: "ŸÖÿ±ÿ≠ÿ®Ÿãÿß! ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸä ÿ≠ŸÑ ÿßŸÑŸÖÿ¥ŸÉŸÑÿßÿ™ ÿßŸÑŸäŸàŸÖÿü",
      help: "ÿ£ŸÜÿß ŸáŸÜÿß ŸÑŸÑŸÖÿ≥ÿßÿπÿØÿ©! ŸäŸÖŸÉŸÜŸÜŸä ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ© ŸÅŸä ŸÖÿ¥ÿßŸÉŸÑ ŸÖÿ™ŸÜŸàÿπÿ© ÿ®ŸÖÿß ŸÅŸä ÿ∞ŸÑŸÉ:\n‚Ä¢ ÿßŸÑŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑÿ™ŸÇŸÜŸäÿ©\n‚Ä¢ ŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑÿ±Ÿäÿßÿ∂Ÿäÿßÿ™\n‚Ä¢ ÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑÿ®ÿ±ŸÖÿ¨ÿ©\n‚Ä¢ ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿµŸàÿ±\n‚Ä¢ ÿ≠ŸÑ ÿßŸÑŸÖÿ¥ŸÉŸÑÿßÿ™ ÿßŸÑÿπÿßŸÖÿ©\n\nŸÖÿß ŸáŸä ÿßŸÑŸÖÿ¥ŸÉŸÑÿ© ÿßŸÑŸÖÿ≠ÿØÿØÿ© ÿßŸÑÿ™Ÿä ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸäŸáÿßÿü",
      thanks: "ÿπŸÅŸàŸãÿß! ŸáŸÑ ŸáŸÜÿßŸÉ ÿ£Ÿä ÿ¥Ÿäÿ° ÿ¢ÿÆÿ± ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸäŸáÿü",
      image:
        "ÿ£ÿ±Ÿâ ÿ£ŸÜŸÉ ÿ¥ÿßÿ±ŸÉÿ™ ÿµŸàÿ±ÿ©. ÿ®ŸäŸÜŸÖÿß ŸÑÿß ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿµŸàÿ± ŸÖÿ®ÿßÿ¥ÿ±ÿ© ŸÅŸä Ÿáÿ∞ÿß ÿßŸÑÿπÿ±ÿ∂ ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿå ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸä:\n‚Ä¢ ÿ£ÿ≥ÿ¶ŸÑÿ© ÿ≠ŸàŸÑ ÿ™ŸÜÿ≥ŸäŸÇÿßÿ™ ÿßŸÑÿµŸàÿ±\n‚Ä¢ ŸÖŸÅÿßŸáŸäŸÖ ŸÖÿπÿßŸÑÿ¨ÿ© ÿßŸÑÿµŸàÿ±\n‚Ä¢ ÿßÿ≥ÿ™ŸÉÿ¥ÿßŸÅ ŸÖÿ¥ÿßŸÉŸÑ ÿßŸÑÿµŸàÿ± Ÿàÿ•ÿµŸÑÿßÿ≠Ÿáÿß\n‚Ä¢ ÿ£ŸÅÿ∂ŸÑ ÿßŸÑŸÖŸÖÿßÿ±ÿ≥ÿßÿ™ ŸÑÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑÿµŸàÿ±\n\nŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸäŸÖÿß Ÿäÿ™ÿπŸÑŸÇ ÿ®ÿßŸÑÿµŸàÿ±ÿü",
      problem:
        "ÿ≥ÿ£ŸÉŸàŸÜ ÿ≥ÿπŸäÿØŸãÿß ŸÑŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸä ÿ≠ŸÑ Ÿáÿ∞Ÿá ÿßŸÑŸÖÿ¥ŸÉŸÑÿ©! ŸáŸÑ ŸäŸÖŸÉŸÜŸÉ ÿ™ŸÇÿØŸäŸÖ ÿßŸÑŸÖÿ≤ŸäÿØ ŸÖŸÜ ÿßŸÑÿ™ŸÅÿßÿµŸäŸÑ ÿ≠ŸàŸÑ ÿßŸÑŸÖÿ¥ŸÉŸÑÿ© ÿßŸÑŸÖÿ≠ÿØÿØÿ© ÿßŸÑÿ™Ÿä ÿ™Ÿàÿßÿ¨ŸáŸáÿßÿü ŸÉŸÑŸÖÿß ÿ≤ÿßÿØÿ™ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿ™Ÿä ÿ™ŸÇÿØŸÖŸáÿß ŸÑŸäÿå ŸÉÿßŸÜ ÿ®ÿ•ŸÖŸÉÿßŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ÿ®ÿ¥ŸÉŸÑ ÿ£ŸÅÿ∂ŸÑ.",
      default: [
        "Ÿáÿ∞ÿß ÿ≥ÿ§ÿßŸÑ ŸÖÿ´Ÿäÿ± ŸÑŸÑÿßŸáÿ™ŸÖÿßŸÖ! ÿØÿπŸÜŸä ÿ£ÿ≥ÿßÿπÿØŸÉ ŸÅŸä ÿ∞ŸÑŸÉ.",
        "ÿ£ŸÅŸáŸÖ ŸÖÿÆÿßŸàŸÅŸÉ. ÿ•ŸÑŸäŸÉ ŸÖÿß ŸäŸÖŸÉŸÜŸÜŸä ÿßŸÇÿ™ÿ±ÿßÿ≠Ÿá:",
        "ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿßÿ≥ÿ™ŸÅÿ≥ÿßÿ±ŸÉÿå ÿ£ŸàÿµŸä ÿ®ÿßŸÑŸÜŸáÿ¨ ÿßŸÑÿ™ÿßŸÑŸä:",
        "ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ŸÅŸä ÿ≠ŸÑ Ÿáÿ∞Ÿá ÿßŸÑŸÖÿ¥ŸÉŸÑÿ©. ÿ•ŸÑŸäŸÉ ÿ™ÿ≠ŸÑŸäŸÑŸä:",
        "Ÿáÿ∞Ÿá ŸÖÿ¥ŸÉŸÑÿ© ÿ¥ÿßÿ¶ÿπÿ© ŸäŸàÿßÿ¨ŸáŸáÿß ÿßŸÑÿπÿØŸäÿØ ŸÖŸÜ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ. ÿ•ŸÑŸäŸÉ ÿßŸÑÿ≠ŸÑ:",
        "ŸÑŸÇÿØ ŸÇŸÖÿ™ ÿ®ÿ™ÿ≠ŸÑŸäŸÑ ŸÖÿ¥ŸÉŸÑÿ™ŸÉ Ÿàÿ•ŸÑŸäŸÉ ÿ™ŸàÿµŸäÿ™Ÿä:",
      ],
    },
  },
  hi: {
    welcome: "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à, ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ",
    title1: "‡§è‡§Ü‡§à ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®",
    title2: "MUHAMMAD HARIS",
    welcomeTitle: "‡§è‡§Ü‡§à ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®",
    welcomeMessage:
      "‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç? ‡§Æ‡•à‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®, ‡§õ‡§µ‡§ø ‡§™‡•ç‡§∞‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ ‡§î‡§∞ ‡§¨‡§π‡•Å‡§§ ‡§ï‡•Å‡§õ ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç!",
    newChat: "‡§®‡§à ‡§ö‡•à‡§ü",
    clearHistory: "‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§∏‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç",
    settings: "‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏",
    darkMode: "‡§°‡§æ‡§∞‡•ç‡§ï ‡§Æ‡•ã‡§°",
    language: "‡§≠‡§æ‡§∑‡§æ:",
    aiOn: "‡§è‡§Ü‡§à: ‡§ö‡§æ‡§≤‡•Ç",
    textColor: "‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§∞‡§Ç‡§ó",
    placeholder: "‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§Ø‡§π‡§æ‡§Ç ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç...",
    settingsTitle: "‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏",
    appearance: "‡§¶‡§ø‡§ñ‡§æ‡§µ‡§ü",
    history: "‡§á‡§§‡§ø‡§π‡§æ‡§∏",
    textColorLabel: "‡§ü‡•á‡§ï‡•ç‡§∏‡•ç‡§ü ‡§∞‡§Ç‡§ó",
    chatHistory: "‡§ö‡•à‡§ü ‡§á‡§§‡§ø‡§π‡§æ‡§∏",
    clearAllHistory: "‡§∏‡§≠‡•Ä ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§∏‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç",
    cancel: "‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
    save: "‡§∏‡§π‡•á‡§ú‡•á‡§Ç",
    typing: "‡§è‡§Ü‡§à ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à",
    you: "‡§Ü‡§™",
    aiAssistant: "‡§è‡§Ü‡§à ‡§∏‡§π‡§æ‡§Ø‡§ï",
    confirmClear: "‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§µ‡§æ‡§ï‡§à ‡§∏‡§≠‡•Ä ‡§ö‡•à‡§ü ‡§á‡§§‡§ø‡§π‡§æ‡§∏ ‡§∏‡§æ‡§´ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
    noMessages: "‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§®‡§π‡•Ä‡§Ç‡•§ ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç!",
    aiResponses: {
      hello: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
      help: "‡§Æ‡•à‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç! ‡§Æ‡•à‡§Ç ‡§µ‡§ø‡§≠‡§ø‡§®‡•ç‡§® ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç ‡§ú‡§ø‡§®‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡§Ç:\n‚Ä¢ ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç\n‚Ä¢ ‡§ó‡§£‡§ø‡§§ ‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§è‡§Ç\n‚Ä¢ ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§Ç‡§ó ‡§™‡•ç‡§∞‡§∂‡•ç‡§®\n‚Ä¢ ‡§õ‡§µ‡§ø ‡§™‡•ç‡§∞‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£\n‚Ä¢ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®\n\n‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡§ø‡§∏ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
      thanks:
        "‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡•ã‡§à ‡§î‡§∞ ‡§ö‡•Ä‡§ú ‡§π‡•à ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
      image:
        "‡§Æ‡•à‡§Ç ‡§¶‡•á‡§ñ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç ‡§ï‡§ø ‡§Ü‡§™‡§®‡•á ‡§è‡§ï ‡§õ‡§µ‡§ø ‡§∏‡§æ‡§ù‡§æ ‡§ï‡•Ä ‡§π‡•à‡•§ ‡§π‡§æ‡§≤‡§æ‡§Ç‡§ï‡§ø ‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§°‡•á‡§Æ‡•ã ‡§Æ‡•á‡§Ç ‡§∏‡•Ä‡§ß‡•á ‡§õ‡§µ‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ, ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§á‡§®‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç:\n‚Ä¢ ‡§õ‡§µ‡§ø ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™ ‡§™‡•ç‡§∞‡§∂‡•ç‡§®\n‚Ä¢ ‡§õ‡§µ‡§ø ‡§™‡•ç‡§∞‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ ‡§Ö‡§µ‡§ß‡§æ‡§∞‡§£‡§æ‡§è‡§Ç\n‚Ä¢ ‡§õ‡§µ‡§ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§®‡§ø‡§µ‡§æ‡§∞‡§£\n‚Ä¢ ‡§õ‡§µ‡§ø ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§∞‡•ç‡§µ‡•ã‡§§‡•ç‡§§‡§Æ ‡§™‡•ç‡§∞‡§•‡§æ‡§è‡§Ç\n\n‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§õ‡§µ‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§Ç‡§¨‡§Ç‡§ß ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç?",
      problem:
        "‡§Æ‡•Å‡§ù‡•á ‡§Ü‡§™‡§ï‡•Ä ‡§â‡§∏ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•ã ‡§π‡§≤ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ñ‡•Å‡§∂‡•Ä ‡§π‡•ã‡§ó‡•Ä! ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§â‡§∏ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ö‡§ß‡§ø‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡§ø‡§∏‡§ï‡§æ ‡§Ü‡§™ ‡§∏‡§æ‡§Æ‡§®‡§æ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç? ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡•á ‡§ú‡§ø‡§§‡§®‡•Ä ‡§Ö‡§ß‡§ø‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§¶‡•á‡§Ç‡§ó‡•á, ‡§Æ‡•à‡§Ç ‡§â‡§§‡§®‡§æ ‡§¨‡•á‡§π‡§§‡§∞ ‡§¢‡§Ç‡§ó ‡§∏‡•á ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§",
      default: [
        "‡§Ø‡§π ‡§è‡§ï ‡§¶‡§ø‡§≤‡§ö‡§∏‡•ç‡§™ ‡§∏‡§µ‡§æ‡§≤ ‡§π‡•à! ‡§Æ‡•Å‡§ù‡•á ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§¶‡•á‡§Ç‡•§",
        "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ö‡§ø‡§Ç‡§§‡§æ ‡§∏‡§Æ‡§ù‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ø‡§π‡§æ‡§Ç ‡§µ‡§π ‡§π‡•à ‡§ú‡•ã ‡§Æ‡•à‡§Ç ‡§∏‡•Å‡§ù‡§æ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç:",
        "‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•ç‡§µ‡•á‡§∞‡•Ä ‡§ï‡•á ‡§Ü‡§ß‡§æ‡§∞ ‡§™‡§∞, ‡§Æ‡•à‡§Ç ‡§®‡§ø‡§Æ‡•ç‡§®‡§≤‡§ø‡§ñ‡§ø‡§§ ‡§¶‡•É‡§∑‡•ç‡§ü‡§ø‡§ï‡•ã‡§£ ‡§ï‡•Ä ‡§∏‡§≤‡§æ‡§π ‡§¶‡•á‡§§‡§æ ‡§π‡•Ç‡§Ç:",
        "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§â‡§∏ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡•ã ‡§π‡§≤ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ø‡§π‡§æ‡§Ç ‡§Æ‡•á‡§∞‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§π‡•à:",
        "‡§Ø‡§π ‡§è‡§ï ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•à ‡§ú‡§ø‡§∏‡§ï‡§æ ‡§∏‡§æ‡§Æ‡§®‡§æ ‡§ï‡§à ‡§â‡§™‡§Ø‡•ã‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ø‡§π‡§æ‡§Ç ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§® ‡§π‡•à:",
        "‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à ‡§î‡§∞ ‡§Ø‡§π‡§æ‡§Ç ‡§Æ‡•á‡§∞‡•Ä ‡§∏‡§ø‡§´‡§æ‡§∞‡§ø‡§∂ ‡§π‡•à:",
      ],
    },
  },
  ru: {
    welcome: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    title1: "AI –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú",
    title2: "MUHAMMAD HARIS",
    welcomeTitle: "AI –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú",
    welcomeMessage:
      "–ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º, –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º!",
    newChat: "–ù–æ–≤—ã–π –ß–∞—Ç",
    clearHistory: "–û—á–∏—Å—Ç–∏—Ç—å –ò—Å—Ç–æ—Ä–∏—é",
    settings: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    darkMode: "–¢–µ–º–Ω—ã–π –†–µ–∂–∏–º",
    language: "–Ø–∑—ã–∫:",
    aiOn: "–ò–ò: –í–ö–õ",
    textColor: "–¶–≤–µ—Ç –¢–µ–∫—Å—Ç–∞",
    placeholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å...",
    settingsTitle: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
    appearance: "–í–Ω–µ—à–Ω–∏–π –í–∏–¥",
    history: "–ò—Å—Ç–æ—Ä–∏—è",
    textColorLabel: "–¶–≤–µ—Ç –¢–µ–∫—Å—Ç–∞",
    chatHistory: "–ò—Å—Ç–æ—Ä–∏—è –ß–∞—Ç–∞",
    clearAllHistory: "–û—á–∏—Å—Ç–∏—Ç—å –í—Å—é –ò—Å—Ç–æ—Ä–∏—é",
    cancel: "–û—Ç–º–µ–Ω–∞",
    save: "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å",
    typing: "–ò–ò –ø–µ—á–∞—Ç–∞–µ—Ç",
    you: "–í—ã",
    aiAssistant: "–ò–ò –ü–æ–º–æ—â–Ω–∏–∫",
    confirmClear: "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?",
    noMessages: "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä!",
    aiResponses: {
      hello: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–µ—à–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º —Å–µ–≥–æ–¥–Ω—è?",
      help: "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏, –≤–∫–ª—é—á–∞—è:\n‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏\n‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n‚Ä¢ –û–±—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º\n\n–° –∫–∞–∫–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?",
      thanks: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –ú–æ–≥—É –ª–∏ —è –ø–æ–º–æ—á—å –≤–∞–º —Å —á–µ–º-—Ç–æ –µ—â–µ?",
      image:
        "–Ø –≤–∏–∂—É, —á—Ç–æ –≤—ã –ø–æ–¥–µ–ª–∏–ª–∏—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º. –•–æ—Ç—è —è –Ω–µ –º–æ–≥—É –Ω–∞–ø—Ä—è–º—É—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —ç—Ç–æ–π –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏, —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:\n‚Ä¢ –í–æ–ø—Ä–æ—Å–∞–º–∏ –æ —Ñ–æ—Ä–º–∞—Ç–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n‚Ä¢ –ö–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n‚Ä¢ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏\n‚Ä¢ –õ—É—á—à–∏–º–∏ –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n–ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏?",
      problem:
        "–Ø –±—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º —Ä–µ—à–∏—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É! –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–µ, —Å –∫–æ—Ç–æ—Ä–æ–π –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å? –ß–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã –º–Ω–µ –¥–∞–¥–∏—Ç–µ, —Ç–µ–º –ª—É—á—à–µ —è —Å–º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å.",
      default: [
        "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ü–æ–∑–≤–æ–ª—å—Ç–µ –º–Ω–µ –ø–æ–º–æ—á—å –≤–∞–º —Å —ç—Ç–∏–º.",
        "–Ø –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –æ–∑–∞–±–æ—á–µ–Ω–Ω–æ—Å—Ç—å. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:",
        "–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥—Ö–æ–¥:",
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Ä–µ—à–∏—Ç—å —ç—Ç—É –ø—Ä–æ–±–ª–µ–º—É. –í–æ—Ç –º–æ–π –∞–Ω–∞–ª–∏–∑:",
        "–≠—Ç–æ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞, —Å –∫–æ—Ç–æ—Ä–æ–π —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è –º–Ω–æ–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏. –í–æ—Ç —Ä–µ—à–µ–Ω–∏–µ:",
        "–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ –≤–æ—Ç –º–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:",
      ],
    },
  },
};

// ‚úÖ AUTOMATIC FIX - Friends ke liye automatically work karega
console.log("üöÄ AI Problem Solve - Auto Fix Enabled");

// Automatic URL fix
const originalFetch = window.fetch;
window.fetch = function (url, options = {}) {
  if (typeof url === "string") {
    // Fix wrong backend URLs
    if (url.includes("abc-123.ngrok.io")) {
      console.log("üîÑ Auto-fixing backend URL...");
      url = url.replace("abc-123.ngrok.io", "python22.pythonanywhere.com");
    }

    // Add CORS for all backend requests
    if (url.includes("python22.pythonanywhere.com")) {
      options.mode = "cors";
      options.credentials = "omit";
    }
  }
  return originalFetch(url, options);
};

// DOM Elements
const chatContainer = document.getElementById("chatContainer");
const userInput = document.getElementById("userInput");
const sendButton = document.getElementById("sendButton");
const newChatBtn = document.getElementById("newChat");
const clearHistoryBtn = document.getElementById("clearHistory");
const imageInput = document.getElementById("imageInput");
const uploadBtn = document.getElementById("uploadBtn");
const fileName = document.getElementById("fileName");
const welcomeMessage = document.getElementById("welcomeMessage");
const welcomeTitle = document.getElementById("welcomeTitle");
const welcomeText = document.getElementById("welcomeText");
const dynamicTitle = document.getElementById("dynamicTitle");
const welcomeUsername = document.getElementById("welcomeUsername");
const languageSelect = document.getElementById("language");
const darkModeToggle = document.getElementById("darkModeToggle");
const profilePicture = document.getElementById("profilePicture");
const changeDpBtn = document.getElementById("changeDpBtn");
const removeDpBtn = document.getElementById("removeDpBtn");
const settingsBtn = document.getElementById("settingsBtn");
const settingsModal = document.getElementById("settingsModal");
const closeSettings = document.getElementById("closeSettings");
const cancelSettings = document.getElementById("cancelSettings");
const saveSettings = document.getElementById("saveSettings");
const textColorPicker = document.getElementById("textColorPicker");
const textColorBtn = document.getElementById("textColorBtn");
const aiToggle = document.getElementById("aiToggle");
const menuToggle = document.getElementById("menuToggle");
const sidebar = document.querySelector(".sidebar");
const historyList = document.getElementById("historyList");
const clearAllHistory = document.getElementById("clearAllHistory");
const tabButtons = document.querySelectorAll(".tab-button");
const tabPanes = document.querySelectorAll(".tab-pane");
const messagesContainer = document.getElementById("messagesContainer");

// Current state
let currentImage = null;
let isAIActive = true;
let currentTextColor = "#333";
let conversations = JSON.parse(localStorage.getItem("aiConversations")) || [];
let currentConversationId = null;
let titleInterval;
let username = localStorage.getItem("username") || "User";
let currentLanguage = "en";

// Event Listeners
sendButton.addEventListener("click", sendMessage);
userInput.addEventListener("keypress", (e) => {
  if (e.key === "Enter" && !e.shiftKey) {
    e.preventDefault();
    sendMessage();
  }
});

newChatBtn.addEventListener("click", startNewChat);
clearHistoryBtn.addEventListener("click", clearChatHistory);
uploadBtn.addEventListener("click", () => imageInput.click());
imageInput.addEventListener("change", handleImageUpload);
languageSelect.addEventListener("change", changeLanguage);
darkModeToggle.addEventListener("change", toggleDarkMode);
changeDpBtn.addEventListener("click", changeProfilePicture);
removeDpBtn.addEventListener("click", removeProfilePicture);
settingsBtn.addEventListener("click", openSettings);
closeSettings.addEventListener(
  "click",
  () => (settingsModal.style.display = "none")
);
cancelSettings.addEventListener(
  "click",
  () => (settingsModal.style.display = "none")
);
saveSettings.addEventListener("click", saveSettingsChanges);
textColorBtn.addEventListener("click", () => {
  settingsModal.style.display = "flex";
  switchTab("appearance");
});
aiToggle.addEventListener("click", toggleAI);
menuToggle.addEventListener("click", toggleSidebar);
clearAllHistory.addEventListener("click", clearAllHistoryHandler);

// Tab switching
tabButtons.forEach((button) => {
  button.addEventListener("click", () => {
    const tabName = button.getAttribute("data-tab");
    switchTab(tabName);
  });
});
const headingTexts = ["AI PROBLEM SOLVE", "MUHAMMAD HARIS"];
const normalTexts = ["AI PROBLEM SOLVE", "MUHAMMAD HARIS"];
let headingIndex = 0;
let normalIndex = 0;

const headingEl = document.getElementById("heading");
const normalEl = document.getElementById("normalText");
const speed = 100;

// Function to animate any text element
function animate(element, texts, index, type) {
  let currentText = texts[index];
  let displayed = "";
  let i = 0;

  const typer = setInterval(() => {
    displayed += currentText[i];
    element.textContent = displayed;
    i++;
    if (i >= currentText.length) {
      clearInterval(typer);
      setTimeout(() => {
        erase(element, currentText, texts, index, type);
      }, 1000);
    }
  }, speed);
}

// Function to erase text
function erase(element, currentText, texts, index, type) {
  let i = currentText.length;
  const eraser = setInterval(() => {
    element.textContent = currentText.slice(0, i - 1);
    i--;
    if (i <= 0) {
      clearInterval(eraser);
      index = (index + 1) % texts.length;

      // üëá Recursive loop (calls itself again safely)
      if (type === "heading") {
        headingIndex = index;
        animate(headingEl, headingTexts, headingIndex, "heading");
      } else {
        normalIndex = index;
        animate(normalEl, normalTexts, normalIndex, "normal");
      }
    }
  }, speed);
}

// ‚úÖ Start both animations
animate(headingEl, headingTexts, headingIndex, "heading");
animate(normalEl, normalTexts, normalIndex, "normal");

// Auto-resize textarea
userInput.addEventListener("input", function () {
  this.style.height = "auto";
  this.style.height = this.scrollHeight + "px";
});

// Initialize on page load
document.addEventListener("DOMContentLoaded", function () {
  // Load dark mode preference
  if (localStorage.getItem("darkMode") === "enabled") {
    document.body.classList.add("dark-mode");
    darkModeToggle.checked = true;
  }

  // Load profile picture
  const savedProfilePic = localStorage.getItem("profilePicture");
  if (savedProfilePic) {
    profilePicture.src = savedProfilePic;
  }

  const colorOptions = document.querySelectorAll(".color-option");
  colorOptions.forEach((option) => {
    option.addEventListener("click", function () {
      const color = this.dataset.color;
      document.body.style.color = color;
      localStorage.setItem("textColor", color);
    });
  });

  const savedColor = localStorage.getItem("textColor");
  if (savedColor) {
    document.body.style.color = savedColor;
  }

  const savedTextColor = localStorage.getItem("textColor");
  if (savedTextColor) {
    currentTextColor = savedTextColor;
    document.documentElement.style.setProperty("--text-color", savedTextColor);
    Array.from(textColorPicker.children).forEach((opt) => {
      if (opt.getAttribute("data-color") === savedTextColor) {
        opt.classList.add("active");
      } else {
        opt.classList.remove("active");
      }
    });
  }

  loadConversations();
  updateWelcomeMessage();

  const savedLanguage = localStorage.getItem("language");
  if (savedLanguage && translations[savedLanguage]) {
    currentLanguage = savedLanguage;
    languageSelect.value = currentLanguage;
    updateLanguage();
  }
});

async function sendMessage() {
  const message = userInput.value.trim();

  let imageBase64 = "";
  if (currentImage) {
    imageBase64 = currentImage.split(",")[1] || currentImage;
  }

  if (!message && !imageBase64) return;

  if (welcomeMessage) {
    welcomeMessage.style.display = "none";
  }

  addMessageToChat("user", message, currentImage);
  userInput.value = "";
  userInput.style.height = "auto";

  if (isAIActive) {
    showTypingIndicator();

    try {
      console.log("üîÑ Backend connection trying...");

      // ‚úÖ FIX: GET TOKEN FROM LOCALSTORAGE
      const token = localStorage.getItem('token');
      console.log("üîë Token from localStorage:", token ? "Exists" : "Missing");
      
      const headers = {
        "Content-Type": "application/json",
      };
      
      // ‚úÖ FIX: ADD AUTHORIZATION HEADER IF TOKEN EXISTS
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
        console.log("‚úÖ Token added to request");
      }

      const response = await fetch(
        "https://python22.pythonanywhere.com/api/chat",
        {
          method: "POST",
          headers: headers,
          body: JSON.stringify({
            message: message,
            image: imageBase64,
            conversation_id: currentConversationId || "default",
            language: currentLanguage,
          }),
          mode: "cors",
          credentials: "omit",
        }
      );

      console.log("üì° Backend response status:", response.status);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log("ü§ñ AI Response data:", data);

      removeTypingIndicator();

      if (data && data.success !== false && data.response) {
        console.log("‚úÖ Using backend AI response");
        addMessageToChat("ai", data.response);
        
        // ‚úÖ SHOW REMAINING MESSAGES INFO
        if (data.remaining_messages !== undefined && data.remaining_messages !== "unlimited") {
          console.log(`üìù Remaining guest messages: ${data.remaining_messages}`);
        }
      } else {
        console.log("‚ùå Backend error, using fallback");
        const fallbackResponse = generateAIResponse(message);
        addMessageToChat("ai", fallbackResponse);
      }

      saveConversation();
    } catch (error) {
      console.error("‚ùå Backend connection failed:", error);
      removeTypingIndicator();

      console.log("üîÑ Using local AI fallback");
      const fallbackResponse = generateAIResponse(message);
      addMessageToChat("ai", fallbackResponse);
      saveConversation();
    }
  } else {
    saveConversation();
  }

  currentImage = null;
  fileName.textContent = "";
}
function addMessageToChat(sender, message, image = null) {
  const messageDiv = document.createElement("div");
  messageDiv.className = `message ${sender}-message`;

  const now = new Date();
  const timeString = now.toLocaleTimeString([], {
    hour: "2-digit",
    minute: "2-digit",
  });

  let content = `
      <div class="message-header">
        <img src="${
          sender === "user"
            ? profilePicture.src
            : "https://cdn-icons-png.flaticon.com/512/4712/4712035.png"
        }" 
             alt="${sender === "user" ? "User" : "AI"}" class="message-avatar">
        <div class="message-sender">${
          sender === "user"
            ? translations[currentLanguage].you
            : translations[currentLanguage].aiAssistant
        }</div>
      </div>
    `;

  if (image) {
    content += `<div class="message-image"><img src="${image}" alt="Uploaded image"></div>`;
  }
  if (message) {
    content += `<div class="message-text">${escapeHtml(message)}</div>`;
  }

  content += `<div class="message-time">${timeString}</div>`;

  messageDiv.innerHTML = content;
  messagesContainer.appendChild(messageDiv);
  chatContainer.scrollTop = chatContainer.scrollHeight;

  if (!currentConversationId) {
    currentConversationId = Date.now().toString();
  }

  if (!conversations.find((c) => c.id === currentConversationId)) {
    conversations.push({
      id: currentConversationId,
      messages: [],
    });
  }

  const currentConv = conversations.find((c) => c.id === currentConversationId);
  currentConv.messages.push({
    sender: sender,
    message: message,
    image: image,
    timestamp: now.getTime(),
  });
}

function showTypingIndicator() {
  const typingDiv = document.createElement("div");
  typingDiv.className = "message ai-message typing-indicator";
  typingDiv.id = "typingIndicator";
  typingDiv.innerHTML = `
      <div class="message-header">
        <img src=""https://cdn-icons-png.flaticon.com/512/4712/4712035.png"
        <div class="message-sender">${translations[currentLanguage].aiAssistant}</div>
      </div>
      <div class="typing-dots">
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
      </div>
    `;
  messagesContainer.appendChild(typingDiv);
  chatContainer.scrollTop = chatContainer.scrollHeight;
}

function removeTypingIndicator() {
  const typingIndicator = document.getElementById("typingIndicator");
  if (typingIndicator) {
    typingIndicator.remove();
  }
}

function generateAIResponse(userMessage) {
  const lang = translations[currentLanguage];
  let response = "";

  const lowerMessage = userMessage.toLowerCase();

  if (
    lowerMessage.includes("hello") ||
    lowerMessage.includes("hi") ||
    lowerMessage.includes("hey")
  ) {
    response = lang.aiResponses.hello;
  } else if (lowerMessage.includes("help")) {
    response = lang.aiResponses.help;
  } else if (lowerMessage.includes("thank")) {
    response = lang.aiResponses.thanks;
  } else if (lowerMessage.includes("image") || currentImage) {
    response = lang.aiResponses.image;
  } else if (lowerMessage.includes("problem")) {
    response = lang.aiResponses.problem;
  } else {
    const responses = lang.aiResponses.default;
    response = responses[Math.floor(Math.random() * responses.length)];
  }

  return response;
}

function handleImageUpload(event) {
  const file = event.target.files[0];
  if (file) {
    const reader = new FileReader();
    reader.onload = function (e) {
      currentImage = e.target.result;
      fileName.textContent = file.name;
    };
    reader.readAsDataURL(file);
  }
}

function startNewChat() {
  if (conversations.length > 0 && messagesContainer.children.length > 0) {
    if (confirm("Start a new chat? Your current conversation will be saved.")) {
      messagesContainer.innerHTML = "";
      if (welcomeMessage) {
        welcomeMessage.style.display = "block";
      }
      currentImage = null;
      fileName.textContent = "";
      currentConversationId = null;
      saveConversation();
    }
  } else {
    messagesContainer.innerHTML = "";
    if (welcomeMessage) {
      welcomeMessage.style.display = "block";
    }
    currentImage = null;
    fileName.textContent = "";
    currentConversationId = null;
  }
}

function clearChatHistory() {
  const lang = translations[currentLanguage];
  if (confirm(lang.confirmClear)) {
    conversations = [];
    localStorage.setItem("aiConversations", JSON.stringify(conversations));
    messagesContainer.innerHTML = "";
    if (welcomeMessage) {
      welcomeMessage.style.display = "block";
    }
    currentConversationId = null;
    currentImage = null;
    fileName.textContent = "";
  }
}

function changeLanguage() {
  currentLanguage = languageSelect.value;
  updateLanguage();
  localStorage.setItem("language", currentLanguage);
}

function updateLanguage() {
  const lang = translations[currentLanguage];

  if (welcomeUsername) welcomeUsername.textContent = lang.welcome;
  if (welcomeTitle) welcomeTitle.textContent = lang.welcomeTitle;
  if (welcomeText) welcomeText.textContent = lang.welcomeMessage;

  const newChatElement = document.querySelector("#newChat .btn-text");
  if (newChatElement) newChatElement.textContent = lang.newChat;

  const clearHistoryElement = document.querySelector("#clearHistory .btn-text");
  if (clearHistoryElement) clearHistoryElement.textContent = lang.clearHistory;

  userInput.placeholder = lang.placeholder;

  updateMessagesLanguage();
}

function updateMessagesLanguage() {
  const messageSenders = document.querySelectorAll(".message-sender");
  const lang = translations[currentLanguage];

  messageSenders.forEach((sender) => {
    const message = sender.closest(".message");
    if (message.classList.contains("user-message")) {
      sender.textContent = lang.you;
    } else if (message.classList.contains("ai-message")) {
      sender.textContent = lang.aiAssistant;
    }
  });
}

function toggleDarkMode() {
  if (darkModeToggle.checked) {
    document.body.classList.add("dark-mode");
    localStorage.setItem("darkMode", "enabled");
  } else {
    document.body.classList.remove("dark-mode");
    localStorage.setItem("darkMode", "disabled");
  }
}

function changeProfilePicture() {
  const input = document.createElement("input");
  input.type = "file";
  input.accept = "image/*";
  input.onchange = function (e) {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function (e) {
        profilePicture.src = e.target.result;
        localStorage.setItem("profilePicture", e.target.result);
      };
      reader.readAsDataURL(file);
    }
  };
  input.click();
}

function removeProfilePicture() {
  if (confirm("Remove your profile picture?")) {
    profilePicture.src = "https://via.placeholder.com/80";
    localStorage.removeItem("profilePicture");
  }
}

function openSettings() {
  settingsModal.style.display = "flex";
  loadHistory();
}

function saveSettingsChanges() {
  document.documentElement.style.setProperty("--text-color", currentTextColor);
  localStorage.setItem("textColor", currentTextColor);
  settingsModal.style.display = "none";
}

function toggleAI() {
  isAIActive = !isAIActive;
  const lang = translations[currentLanguage];
  aiToggle.innerHTML = `<i class="fas fa-robot"></i> <span class="btn-text"> ${
    isAIActive ? lang.aiOn : "OFF"
  }</span>`;
  aiToggle.style.background = isAIActive ? "" : "#e74c3c";
}

function toggleSidebar() {
  sidebar.classList.toggle("active");
}

function saveConversation() {
  localStorage.setItem("aiConversations", JSON.stringify(conversations));
}

function loadConversations() {
  if (conversations.length > 0) {
    const recentConv = conversations[conversations.length - 1];
    currentConversationId = recentConv.id;

    if (welcomeMessage) welcomeMessage.style.display = "none";
    recentConv.messages.forEach((msg) => {
      addMessageToChat(msg.sender, msg.message, msg.image);
    });
  }
}

function escapeHtml(text) {
  const div = document.createElement("div");
  div.textContent = text;
  return div.innerHTML;
}

function updateWelcomeMessage() {
  const lang = translations[currentLanguage];
  if (welcomeUsername) {
    welcomeUsername.textContent = `${lang.welcome.split(",")[0]}, ${username}`;
  }
}

function switchTab(tabName) {
  tabButtons.forEach((button) => {
    if (button.getAttribute("data-tab") === tabName) {
      button.classList.add("active");
    } else {
      button.classList.remove("active");
    }
  });

  tabPanes.forEach((pane) => {
    if (pane.id === `${tabName}Tab`) {
      pane.classList.add("active");
    } else {
      pane.classList.remove("active");
    }
  });

  if (tabName === "history") {
    loadHistory();
  }
}

function loadHistory() {
  historyList.innerHTML = "";

  if (conversations.length === 0) {
    const lang = translations[currentLanguage];
    historyList.innerHTML = `<div class="no-history">${lang.noMessages}</div>`;
    return;
  }

  conversations.forEach((conversation, index) => {
    const historyItem = document.createElement("div");
    historyItem.className = "history-item";

    let previewText = "Empty conversation";
    if (conversation.messages.length > 0) {
      const userMessage = conversation.messages.find(
        (msg) => msg.sender === "user"
      );
      if (userMessage) {
        previewText = userMessage.message.substring(0, 50);
        if (userMessage.message.length > 50) {
          previewText += "...";
        }
      }
    }

    historyItem.innerHTML = `
        <div class="history-item-content">${previewText}</div>
        <div class="history-item-actions">
          <button class="history-btn view" data-index="${index}">View</button>
          <button class="history-btn delete" data-index="${index}">Delete</button>
        </div>
      `;

    historyList.appendChild(historyItem);
  });

  document.querySelectorAll(".history-btn.view").forEach((btn) => {
    btn.addEventListener("click", function () {
      const index = this.getAttribute("data-index");
      viewConversation(index);
    });
  });

  document.querySelectorAll(".history-btn.delete").forEach((btn) => {
    btn.addEventListener("click", function () {
      const index = this.getAttribute("data-index");
      deleteConversation(index);
    });
  });
}

function viewConversation(index) {
  const conversation = conversations[index];
  if (!conversation) return;

  messagesContainer.innerHTML = "";

  conversation.messages.forEach((msg) => {
    addMessageToChat(msg.sender, msg.message, msg.image);
  });

  currentConversationId = conversation.id;

  if (welcomeMessage) {
    welcomeMessage.style.display = "none";
  }

  settingsModal.style.display = "none";
}

function deleteConversation(index) {
  if (confirm("Are you sure you want to delete this conversation?")) {
    conversations.splice(index, 1);
    localStorage.setItem("aiConversations", JSON.stringify(conversations));
    loadHistory();

    if (
      currentConversationId &&
      !conversations.find((c) => c.id === currentConversationId)
    ) {
      startNewChat();
    }
  }
}

function clearAllHistoryHandler() {
  const lang = translations[currentLanguage];
  if (confirm(lang.confirmClear)) {
    conversations = [];
    localStorage.setItem("aiConversations", JSON.stringify(conversations));
    loadHistory();
    startNewChat();
  }
}

// Color picker functionality
Array.from(textColorPicker.children).forEach((option) => {
  option.addEventListener("click", function () {
    Array.from(textColorPicker.children).forEach((opt) =>
      opt.classList.remove("active")
    );
    this.classList.add("active");
    currentTextColor = this.getAttribute("data-color");
  });
});

// Page load pe automatically test karo
window.addEventListener("load", function () {
  console.log("‚úÖ AI Problem Solve Ready!");
  // Auto-test backend connection
  setTimeout(() => {
    fetch("https://python22.pythonanywhere.com/api/health")
      .then((response) => response.json())
      .then((data) => console.log("üîß Backend Status:", data.status))
      .catch((err) => console.log("‚ö†Ô∏è Backend Check:", err));
  }, 1000);
});

console.log("üéØ AI Problem Solve JavaScript Loaded Successfully!");
}
